{"version":3,"sources":["components/Recipe.js","media/loading.gif","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","toFixed","src","alt","map","index","text","App","API_ID","process","API_KEY","useState","recipes","setRecipes","search","setSearch","query","setQuery","url","setURL","isLoading","setIsLoading","useEffect","a","fetch","response","json","data","hits","getRecipes","onSubmit","e","preventDefault","autoFocus","type","value","onChange","target","onKeyPress","key","document","getElementById","click","placeholder","id","loading","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qOAsBeA,G,MAnBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAErC,OACI,sBAAKC,UAAU,aAAf,UAGI,6BAAKJ,IACL,2CAAeC,EAAUI,QAAQ,MACjC,qBAAKC,IAAKJ,EAAOK,IAAKP,IACtB,6BACKG,EAAYK,KAAI,SAACL,EAAaM,GAAd,OACb,6BAAiBN,EAAYO,MAApBD,aCdd,MAA0B,oCCwE1BE,EAlEH,WAEV,IAAMC,EAASC,WACTC,EAAUD,mCAHA,EAKcE,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,IAPnB,mBAOTK,EAPS,KAOFC,EAPE,OAQMN,mBAAS,mCAAD,OAAoCK,EAApC,mBAAoDR,EAApD,oBAAsEE,IARpF,mBAQTQ,EARS,KAQJC,EARI,OASkBR,oBAAS,GAT3B,mBASTS,EATS,KASEC,EATF,KAWhBC,qBAAW,YACO,uCAAG,8BAAAC,EAAA,6DACjBF,GAAa,GADI,SAEMG,MAAMN,GAFZ,cAEXO,EAFW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAIjBd,EAAWc,EAAKC,MAChBP,GAAa,GALI,2CAAH,qDAOhBQ,KACA,CAACX,IAaH,OACE,sBAAKlB,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,uBACA,uBAAM8B,SAVQ,SAAAC,GAChBA,EAAEC,iBACFf,EAASH,GACTC,EAAU,IACVI,EAAO,mCAAD,OAAoCH,EAApC,mBAAoDR,EAApD,oBAAsEE,KAM7CV,UAAU,cAAvC,UACE,uBAAOiC,WAAS,EAACjC,UAAU,aAAakC,KAAK,OAAOC,MAAOrB,EAAQsB,SAfpD,SAAAL,GACnBhB,EAAUgB,EAAEM,OAAOF,QAefG,WAAa,SAAAP,GACI,UAAVA,EAAEQ,KAEHC,SAASC,eAAe,OAAOC,SAIrCC,YAAY,4BACZ,wBAAQC,GAAG,MAAM5C,UAAU,gBAAgBkC,KAAK,SAAhD,uBAEDd,EAAY,qBAAKpB,UAAU,UAAUE,IAAK2C,EAAS1C,IAAI,KAAQ,GAChE,qBAAKH,UAAU,MAAf,SACGY,EAAQR,KAAI,SAAC0C,EAAQzC,GAAT,OACX,cAAC,EAAD,CACEL,UAAU,SAEVJ,MAAOkD,EAAOA,OAAOC,MACrBlD,SAAUiD,EAAOA,OAAOjD,SACxBC,MAAOgD,EAAOA,OAAOhD,MACrBC,YAAa+C,EAAOA,OAAO/C,aAJtBM,YC/CF2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASC,eAAe,SAM1BO,M","file":"static/js/main.30924d02.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Recipe = ({title, calories, image, ingredients}) => {\n\n    return(\n        <div className=\"recipe-box\">\n            {/* <h1>{check.length < 0 && \"No results\" }</h1> */}\n\n            <h1>{title}</h1>\n            <p>Calories: {(calories).toFixed(2)}</p>\n            <img src={image} alt={title} />\n            <ul>\n                {ingredients.map((ingredients, index) => (\n                    <li key={index}>{ingredients.text}</li>\n                ))}\n            </ul>\n        </div>\n    );\n\n};\n\nexport default Recipe;","export default __webpack_public_path__ + \"static/media/loading.6adb3553.gif\";","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport './components/Recipe';\nimport Recipe from './components/Recipe';\nimport loading from './media/loading.gif';\n\nconst App = () => {\n\n  const API_ID = process.env.REACT_APP_API_ID;\n  const API_KEY = process.env.REACT_APP_API_KEY; \n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n  const [url, setURL] = useState(`https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect( () => {\n    const getRecipes = async () => {\n      setIsLoading(true);\n      const response = await fetch(url);\n      const data = await response.json()\n      setRecipes(data.hits);\n      setIsLoading(false);\n  };\n    getRecipes();\n  },[url]);\n    \n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n    setURL(`https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-name\">RecipeApp</h1>\n      <form onSubmit={getSearch}   className=\"search-form\">\n        <input autoFocus className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}\n        onKeyPress={ e => {\n            if(e.key === 'Enter')\n            {\n              document.getElementById('btn').click();\n            }\n          }\n        }\n        placeholder=\"Try a new recipe today.\" />\n        <button id=\"btn\" className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      {isLoading ? <img className=\"loading\" src={loading} alt=\"\" /> : \"\"}\n      <div className=\"row\">\n        {recipes.map((recipe, index ) => (\n          <Recipe\n            className=\"column\"\n            key={index}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}